# -*- coding: utf-8 -*-
"""Health ai.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWkL62RTJ7jo3JsCCNbkzXo64xjRMEnI
"""

!pip install transformers torch gradio PyPDF2

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure pad_token is defined
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Function to generate model response
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += (page.extract_text() or "") + "\n"
        return text.strip()
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# Function to analyze requirements
def requirement_analysis(pdf_file, prompt_text):
    if not pdf_file and not prompt_text.strip():
        return "‚ö†Ô∏è Please upload a PDF or enter some text."

    if pdf_file:
        content = extract_text_from_pdf(pdf_file)
    else:
        content = prompt_text

    analysis_prompt = (
        "Please analyze the following software requirements and extract:\n"
        "- Functional Requirements\n"
        "- Non-functional Requirements\n"
        "- Technical Specifications\n\n"
        "Requirements:\n" + content
    )

    return generate_response(analysis_prompt, max_length=1200)

# Function to generate code from prompt
def code_generation(prompt, language):
    if not prompt.strip():
        return "‚ö†Ô∏è Please enter a requirement to generate code."

    code_prompt = f"Generate {language} code for the following requirement:\n\n{prompt}\n\nCode:"
    return generate_response(code_prompt, max_length=1200)

# Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("# ü§ñ Smart SDLC Tool\nAI-powered Requirement Analyzer & Code Generator")

    with gr.Tabs():
        # Requirement Analysis Tab
        with gr.TabItem("üìù Requirement Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or write requirements here",
                        placeholder="Describe your software requirements...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze")

                with gr.Column():
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20, show_copy_button=True)

            analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

        # Code Generation Tab
        with gr.TabItem("üíª Code Generation"):
            with gr.Row():
                with gr.Column():
                    code_prompt = gr.Textbox(
                        label="Code Requirements",
                        placeholder="Describe what code you want to generate...",
                        lines=5
                    )
                    language_dropdown = gr.Dropdown(
                        choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                        label="Programming Language",
                        value="Python"
                    )
                    generate_btn = gr.Button("Generate Code")

                with gr.Column():
                    code_output = gr.Textbox(label="Generated Code", lines=20, show_copy_button=True)

            generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown], outputs=code_output)

# Launch the app
app.launch(share=True)